<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__topology_painter_8java_source" xml:lang="en-US">
<title>TopologyPainter.java</title>
<indexterm><primary>E:/Project/Networking Projects/NS3-GUI/src/main/GuiRenderers/TopologyPainter.java</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="__topology_painter_8java_source_1l00001"/>00001 <emphasis role="keyword">package&#32;</emphasis>GuiRenderers;
<anchor xml:id="__topology_painter_8java_source_1l00002"/>00002 
<anchor xml:id="__topology_painter_8java_source_1l00003"/>00003 
<anchor xml:id="__topology_painter_8java_source_1l00004"/>00004 <emphasis role="keyword">import</emphasis>&#32;<link linkend="_namespace_helpers">Helpers</link>.<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>;
<anchor xml:id="__topology_painter_8java_source_1l00005"/>00005 <emphasis role="keyword">import</emphasis>&#32;Ns3Objects.Links.WIFI;
<anchor xml:id="__topology_painter_8java_source_1l00006"/>00006 
<anchor xml:id="__topology_painter_8java_source_1l00007"/>00007 <emphasis role="keyword">import</emphasis>&#32;java.awt.*;
<anchor xml:id="__topology_painter_8java_source_1l00008"/>00008 <emphasis role="keyword">import</emphasis>&#32;java.util.ArrayList;
<anchor xml:id="__topology_painter_8java_source_1l00009"/>00009 
<anchor xml:id="__topology_painter_8java_source_1l00014"/><link linkend="_class_gui_renderers_1_1_topology_painter">00014</link> <emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_gui_renderers_1_1_topology_painter">TopologyPainter</link>&#32;<emphasis role="keyword">extends</emphasis>&#32;Canvas&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00018"/>00018 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;DEFAULT_WIDTH&#32;=&#32;500;
<anchor xml:id="__topology_painter_8java_source_1l00022"/>00022 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;DEFAULT_HEIGHT&#32;=&#32;500;
<anchor xml:id="__topology_painter_8java_source_1l00026"/>00026 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;SERVER_NODE&#32;=&#32;-1;
<anchor xml:id="__topology_painter_8java_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;CLIENT_NODE&#32;=&#32;-1;
<anchor xml:id="__topology_painter_8java_source_1l00034"/>00034 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_class_gui_renderers_1_1_node_painter">NodePainter</link>&#32;HIGHLIGHT&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<link linkend="_class_gui_renderers_1_1_node_painter">NodePainter</link>(0,0,&#32;30,&#32;<emphasis role="stringliteral">&quot;SERVER&quot;</emphasis>,&#32;Color.black);
<anchor xml:id="__topology_painter_8java_source_1l00035"/>00035 
<anchor xml:id="__topology_painter_8java_source_1l00039"/>00039 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;width,&#32;height;
<anchor xml:id="__topology_painter_8java_source_1l00043"/>00043 &#32;&#32;&#32;&#32;ArrayList&lt;NodePainter&gt;&#32;nodes;
<anchor xml:id="__topology_painter_8java_source_1l00047"/>00047 &#32;&#32;&#32;&#32;ArrayList&lt;P2pLinkPainter&gt;&#32;links;
<anchor xml:id="__topology_painter_8java_source_1l00051"/>00051 &#32;&#32;&#32;&#32;ArrayList&lt;CsmaLinkPainter&gt;&#32;links_csma;
<anchor xml:id="__topology_painter_8java_source_1l00055"/>00055 &#32;&#32;&#32;&#32;ArrayList&lt;WifiLinkPainter&gt;&#32;links_wifi;
<anchor xml:id="__topology_painter_8java_source_1l00059"/>00059 &#32;&#32;&#32;&#32;ArrayList&lt;NodePainter&gt;&#32;referenceNodes;
<anchor xml:id="__topology_painter_8java_source_1l00060"/>00060 
<anchor xml:id="__topology_painter_8java_source_1l00069"/><link linkend="_class_gui_renderers_1_1_topology_painter_1a4a951d4e85b36e6f9d656b62ea7b0121">00069</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_gui_renderers_1_1_topology_painter_1a4a951d4e85b36e6f9d656b62ea7b0121">TopologyPainter</link>(ArrayList&lt;NodePainter&gt;&#32;n,&#32;ArrayList&lt;P2pLinkPainter&gt;&#32;l)&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">this</emphasis>(n,l,DEFAULT_WIDTH,DEFAULT_HEIGHT);
<anchor xml:id="__topology_painter_8java_source_1l00071"/>00071 &#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00072"/>00072 
<anchor xml:id="__topology_painter_8java_source_1l00083"/><link linkend="_class_gui_renderers_1_1_topology_painter_1a2f6340d2f1492f868c933cf90d53d366">00083</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_gui_renderers_1_1_topology_painter_1a2f6340d2f1492f868c933cf90d53d366">TopologyPainter</link>(ArrayList&lt;NodePainter&gt;&#32;n,&#32;ArrayList&lt;P2pLinkPainter&gt;&#32;l,&#32;<emphasis role="keywordtype">int</emphasis>&#32;w,&#32;<emphasis role="keywordtype">int</emphasis>&#32;h)&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1a9d59d12965cd365e86f6bb5d352f41c6">Log</link>(<emphasis role="stringliteral">&quot;Creating&#32;the&#32;object&#32;of&#32;type&#32;TopologyPainter&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;initializing&#32;components...</emphasis>
<anchor xml:id="__topology_painter_8java_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.nodes&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;ArrayList&lt;&gt;();
<anchor xml:id="__topology_painter_8java_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.nodes.addAll(n);
<anchor xml:id="__topology_painter_8java_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.links&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;ArrayList&lt;&gt;();
<anchor xml:id="__topology_painter_8java_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.links.addAll(l);
<anchor xml:id="__topology_painter_8java_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.links_csma&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;ArrayList&lt;&gt;();
<anchor xml:id="__topology_painter_8java_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.links_wifi&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;ArrayList&lt;&gt;();
<anchor xml:id="__topology_painter_8java_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.referenceNodes&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;ArrayList&lt;&gt;();
<anchor xml:id="__topology_painter_8java_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.width&#32;=&#32;w;
<anchor xml:id="__topology_painter_8java_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.height&#32;=&#32;h;
<anchor xml:id="__topology_painter_8java_source_1l00095"/>00095 &#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00096"/>00096 
<anchor xml:id="__topology_painter_8java_source_1l00103"/>00103 &#32;&#32;&#32;&#32;@Override
<anchor xml:id="__topology_painter_8java_source_1l00104"/><link linkend="_class_gui_renderers_1_1_topology_painter_1a919a8460a55a3ff7bf985e6df1a593e3">00104</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_gui_renderers_1_1_topology_painter_1a919a8460a55a3ff7bf985e6df1a593e3">paint</link>(Graphics&#32;g)&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1a811f34f64ec058289a8c010dd747f50f">LogFunction</link>(<emphasis role="stringliteral">&quot;Painting&#32;entire&#32;canvas!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;super.paint(g);
<anchor xml:id="__topology_painter_8java_source_1l00107"/>00107 
<anchor xml:id="__topology_painter_8java_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1ab68b81908e2e6e6ebc0588f04eec1d27">LogLogic</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;clearing&#32;the&#32;canvas!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;g.clearRect(0,0,this.width,this.height);
<anchor xml:id="__topology_painter_8java_source_1l00110"/>00110 
<anchor xml:id="__topology_painter_8java_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1ab68b81908e2e6e6ebc0588f04eec1d27">LogLogic</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;LAYER-1&#32;painting&#32;reference&#32;nodes!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;painting&#32;reference&#32;nodes...</emphasis>
<anchor xml:id="__topology_painter_8java_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;this.referenceNodes.size();&#32;i++)&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.referenceNodes.get(i).paint(g);
<anchor xml:id="__topology_painter_8java_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00116"/>00116 
<anchor xml:id="__topology_painter_8java_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1ab68b81908e2e6e6ebc0588f04eec1d27">LogLogic</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;LAYER-2&#32;painting&#32;nodes!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;painting&#32;the&#32;nodes...</emphasis>
<anchor xml:id="__topology_painter_8java_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;this.nodes.size();&#32;i++)&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(SERVER_NODE&#32;==&#32;i)&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HIGHLIGHT.label&#32;=&#32;<emphasis role="stringliteral">&quot;SERVER&quot;</emphasis>;
<anchor xml:id="__topology_painter_8java_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HIGHLIGHT.color&#32;=&#32;Color.black;
<anchor xml:id="__topology_painter_8java_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HIGHLIGHT.xPos&#32;=&#32;this.nodes.get(i).xPos&#32;-&#32;5;
<anchor xml:id="__topology_painter_8java_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HIGHLIGHT.yPos&#32;=&#32;this.nodes.get(i).yPos&#32;-&#32;5;
<anchor xml:id="__topology_painter_8java_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HIGHLIGHT.<link linkend="_class_gui_renderers_1_1_node_painter_1a56661670adef01ab7f964de42a6dd14a">paint</link>(g);
<anchor xml:id="__topology_painter_8java_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00127"/>00127 
<anchor xml:id="__topology_painter_8java_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CLIENT_NODE&#32;==&#32;i)&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HIGHLIGHT.label&#32;=&#32;<emphasis role="stringliteral">&quot;CLIENT&quot;</emphasis>;
<anchor xml:id="__topology_painter_8java_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HIGHLIGHT.color&#32;=&#32;Color.black;
<anchor xml:id="__topology_painter_8java_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HIGHLIGHT.xPos&#32;=&#32;this.nodes.get(i).xPos&#32;-&#32;5;
<anchor xml:id="__topology_painter_8java_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HIGHLIGHT.yPos&#32;=&#32;this.nodes.get(i).yPos&#32;-&#32;5;
<anchor xml:id="__topology_painter_8java_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HIGHLIGHT.<link linkend="_class_gui_renderers_1_1_node_painter_1a56661670adef01ab7f964de42a6dd14a">paint</link>(g);
<anchor xml:id="__topology_painter_8java_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.nodes.get(i).paint(g);
<anchor xml:id="__topology_painter_8java_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00137"/>00137 
<anchor xml:id="__topology_painter_8java_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1ab68b81908e2e6e6ebc0588f04eec1d27">LogLogic</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;LAYER-3&#32;painting&#32;P2P&#32;Links!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;painting&#32;point&#32;to&#32;point&#32;links...</emphasis>
<anchor xml:id="__topology_painter_8java_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;this.links.size();&#32;i++)&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.links.get(i).paint(g);
<anchor xml:id="__topology_painter_8java_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00143"/>00143 
<anchor xml:id="__topology_painter_8java_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1ab68b81908e2e6e6ebc0588f04eec1d27">LogLogic</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;LAYER-4&#32;painting&#32;csma&#32;Links!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;painting&#32;csma&#32;links...</emphasis>
<anchor xml:id="__topology_painter_8java_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;this.links_csma.size();&#32;i++)&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.links_csma.get(i).paint(g);
<anchor xml:id="__topology_painter_8java_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00149"/>00149 
<anchor xml:id="__topology_painter_8java_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1ab68b81908e2e6e6ebc0588f04eec1d27">LogLogic</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;LAYER-5&#32;painting&#32;wi-fi&#32;links!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;painting&#32;wi-fi&#32;links...</emphasis>
<anchor xml:id="__topology_painter_8java_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;this.links_wifi.size();&#32;i++)&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.links_wifi.get(i).paint(g);
<anchor xml:id="__topology_painter_8java_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00155"/>00155 &#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00156"/>00156 
<anchor xml:id="__topology_painter_8java_source_1l00157"/>00157 &#32;&#32;&#32;&#32;@Override
<anchor xml:id="__topology_painter_8java_source_1l00158"/><link linkend="_class_gui_renderers_1_1_topology_painter_1a168b4abe23d1a97ed1a35626cdbcd26b">00158</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Dimension&#32;<link linkend="_class_gui_renderers_1_1_topology_painter_1a168b4abe23d1a97ed1a35626cdbcd26b">getPreferredSize</link>()&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1a811f34f64ec058289a8c010dd747f50f">LogFunction</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;get&#32;preferred&#32;size&#32;called!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Dimension(this.width,this.height);
<anchor xml:id="__topology_painter_8java_source_1l00161"/>00161 &#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00162"/>00162 
<anchor xml:id="__topology_painter_8java_source_1l00169"/><link linkend="_class_gui_renderers_1_1_topology_painter_1aba3c8b5fc66d07cb2c0b0b3781e3f914">00169</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_gui_renderers_1_1_topology_painter_1aba3c8b5fc66d07cb2c0b0b3781e3f914">addNode</link>(<link linkend="_class_gui_renderers_1_1_node_painter">NodePainter</link>&#32;node)&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1a811f34f64ec058289a8c010dd747f50f">LogFunction</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;add&#32;node&#32;called!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.nodes.add(node);
<anchor xml:id="__topology_painter_8java_source_1l00172"/>00172 &#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00173"/>00173 
<anchor xml:id="__topology_painter_8java_source_1l00181"/><link linkend="_class_gui_renderers_1_1_topology_painter_1ae04525a2f36ccf686b3ec6f5e0b16cf4">00181</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_gui_renderers_1_1_topology_painter_1ae04525a2f36ccf686b3ec6f5e0b16cf4">addLink</link>(<link linkend="_class_gui_renderers_1_1_p2p_link_painter">P2pLinkPainter</link>&#32;link)&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1a811f34f64ec058289a8c010dd747f50f">LogFunction</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;add&#32;link&#32;called!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1a1f01a0d874cafdfea0780acfc5d2061f">LogInfo</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;adding&#32;p2p&#32;link!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.links.add(link);
<anchor xml:id="__topology_painter_8java_source_1l00185"/>00185 &#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00186"/>00186 
<anchor xml:id="__topology_painter_8java_source_1l00194"/><link linkend="_class_gui_renderers_1_1_topology_painter_1a9e50f256be1a565b7822a1c7265563ed">00194</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_gui_renderers_1_1_topology_painter_1a9e50f256be1a565b7822a1c7265563ed">addLink</link>(<link linkend="_class_gui_renderers_1_1_csma_link_painter">CsmaLinkPainter</link>&#32;link)&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1a811f34f64ec058289a8c010dd747f50f">LogFunction</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;add&#32;link&#32;called!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1a1f01a0d874cafdfea0780acfc5d2061f">LogInfo</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;adding&#32;csma&#32;link!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.links_csma.add(link);
<anchor xml:id="__topology_painter_8java_source_1l00198"/>00198 &#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00199"/>00199 
<anchor xml:id="__topology_painter_8java_source_1l00206"/><link linkend="_class_gui_renderers_1_1_topology_painter_1a9ae245ab4866f5d2da3038a35e53a4c9">00206</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_gui_renderers_1_1_topology_painter_1a9ae245ab4866f5d2da3038a35e53a4c9">addLink</link>(<link linkend="_class_gui_renderers_1_1_wifi_link_painter">WifiLinkPainter</link>&#32;link)&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00207"/>00207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1a811f34f64ec058289a8c010dd747f50f">LogFunction</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;add&#32;link&#32;called!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00208"/>00208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1a1f01a0d874cafdfea0780acfc5d2061f">LogInfo</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;adding&#32;wifi&#32;link!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.links_wifi.add(link);
<anchor xml:id="__topology_painter_8java_source_1l00210"/>00210 &#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00211"/>00211 
<anchor xml:id="__topology_painter_8java_source_1l00218"/><link linkend="_class_gui_renderers_1_1_topology_painter_1a4429ee55cd09d4252c89c06c5b27a0a2">00218</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_gui_renderers_1_1_topology_painter_1a4429ee55cd09d4252c89c06c5b27a0a2">addRefNode</link>(<link linkend="_class_gui_renderers_1_1_node_painter">NodePainter</link>&#32;node)&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1a811f34f64ec058289a8c010dd747f50f">LogFunction</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;add&#32;ref&#32;node&#32;called!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.referenceNodes.add(node);
<anchor xml:id="__topology_painter_8java_source_1l00221"/>00221 &#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00222"/>00222 
<anchor xml:id="__topology_painter_8java_source_1l00229"/><link linkend="_class_gui_renderers_1_1_topology_painter_1a8dbbda8f7032657409227598818f091c">00229</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_gui_renderers_1_1_topology_painter_1a8dbbda8f7032657409227598818f091c">addAndPrintRefNode</link>(<link linkend="_class_gui_renderers_1_1_node_painter">NodePainter</link>&#32;node)&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00230"/>00230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1a811f34f64ec058289a8c010dd747f50f">LogFunction</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;add&#32;and&#32;print&#32;ref&#32;node&#32;called!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.<link linkend="_class_gui_renderers_1_1_topology_painter_1a4429ee55cd09d4252c89c06c5b27a0a2">addRefNode</link>(node);
<anchor xml:id="__topology_painter_8java_source_1l00232"/>00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.repaint();
<anchor xml:id="__topology_painter_8java_source_1l00233"/>00233 &#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00234"/>00234 
<anchor xml:id="__topology_painter_8java_source_1l00241"/><link linkend="_class_gui_renderers_1_1_topology_painter_1adaa61bc3859745625b237b00ef1b4d0f">00241</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_gui_renderers_1_1_topology_painter_1adaa61bc3859745625b237b00ef1b4d0f">addAndPrintNode</link>(<link linkend="_class_gui_renderers_1_1_node_painter">NodePainter</link>&#32;node)&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00242"/>00242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1a811f34f64ec058289a8c010dd747f50f">LogFunction</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;add&#32;and&#32;print&#32;node&#32;called!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.<link linkend="_class_gui_renderers_1_1_topology_painter_1aba3c8b5fc66d07cb2c0b0b3781e3f914">addNode</link>(node);
<anchor xml:id="__topology_painter_8java_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.repaint();
<anchor xml:id="__topology_painter_8java_source_1l00245"/>00245 &#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00246"/>00246 
<anchor xml:id="__topology_painter_8java_source_1l00253"/><link linkend="_class_gui_renderers_1_1_topology_painter_1a80e900d364e9af95b2d24dd29e247c64">00253</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_gui_renderers_1_1_topology_painter_1a80e900d364e9af95b2d24dd29e247c64">addAndPrintLink</link>(<link linkend="_class_gui_renderers_1_1_csma_link_painter">CsmaLinkPainter</link>&#32;link)&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1a811f34f64ec058289a8c010dd747f50f">LogFunction</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;add&#32;and&#32;print&#32;link&#32;called!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.<link linkend="_class_gui_renderers_1_1_topology_painter_1ae04525a2f36ccf686b3ec6f5e0b16cf4">addLink</link>(link);
<anchor xml:id="__topology_painter_8java_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.repaint();
<anchor xml:id="__topology_painter_8java_source_1l00257"/>00257 &#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00258"/>00258 
<anchor xml:id="__topology_painter_8java_source_1l00265"/><link linkend="_class_gui_renderers_1_1_topology_painter_1a1cf50659b31e8fa1c4b2081596045554">00265</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_gui_renderers_1_1_topology_painter_1a1cf50659b31e8fa1c4b2081596045554">addAndPrintLink</link>(<link linkend="_class_gui_renderers_1_1_p2p_link_painter">P2pLinkPainter</link>&#32;link)&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1a811f34f64ec058289a8c010dd747f50f">LogFunction</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;add&#32;and&#32;print&#32;link&#32;called!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.<link linkend="_class_gui_renderers_1_1_topology_painter_1ae04525a2f36ccf686b3ec6f5e0b16cf4">addLink</link>(link);
<anchor xml:id="__topology_painter_8java_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.repaint();
<anchor xml:id="__topology_painter_8java_source_1l00269"/>00269 &#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00270"/>00270 
<anchor xml:id="__topology_painter_8java_source_1l00277"/><link linkend="_class_gui_renderers_1_1_topology_painter_1a217936faa6bfa0fc7fbcebcfedc17931">00277</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_gui_renderers_1_1_topology_painter_1a217936faa6bfa0fc7fbcebcfedc17931">addAndPrintLink</link>(<link linkend="_class_gui_renderers_1_1_wifi_link_painter">WifiLinkPainter</link>&#32;link)&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00278"/>00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1a811f34f64ec058289a8c010dd747f50f">LogFunction</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;add&#32;and&#32;print&#32;link&#32;called!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00279"/>00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.<link linkend="_class_gui_renderers_1_1_topology_painter_1ae04525a2f36ccf686b3ec6f5e0b16cf4">addLink</link>(link);
<anchor xml:id="__topology_painter_8java_source_1l00280"/>00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.repaint();
<anchor xml:id="__topology_painter_8java_source_1l00281"/>00281 &#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00282"/>00282 
<anchor xml:id="__topology_painter_8java_source_1l00292"/><link linkend="_class_gui_renderers_1_1_topology_painter_1ad5dfca2823170d1beea4f59331b429f8">00292</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_class_gui_renderers_1_1_topology_painter_1ad5dfca2823170d1beea4f59331b429f8">pointCollideWithAny</link>(<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y)&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1a811f34f64ec058289a8c010dd747f50f">LogFunction</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;point&#32;collide&#32;with&#32;any&#32;called!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;index&#32;=&#32;-1;
<anchor xml:id="__topology_painter_8java_source_1l00295"/>00295 
<anchor xml:id="__topology_painter_8java_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i=0;&#32;i&lt;this.nodes.size();&#32;i++)&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(this.checkCollisionWithNode(this.nodes.get(i),&#32;x,&#32;y))&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;index&#32;=&#32;i;
<anchor xml:id="__topology_painter_8java_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__topology_painter_8java_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00302"/>00302 
<anchor xml:id="__topology_painter_8java_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;index;
<anchor xml:id="__topology_painter_8java_source_1l00304"/>00304 &#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00305"/>00305 
<anchor xml:id="__topology_painter_8java_source_1l00313"/><link linkend="_class_gui_renderers_1_1_topology_painter_1a8d99c63aa42513c1ba13340acd7959a4">00313</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_gui_renderers_1_1_topology_painter_1a8d99c63aa42513c1ba13340acd7959a4">enableView</link>(<emphasis role="keywordtype">int</emphasis>&#32;s,&#32;<emphasis role="keywordtype">int</emphasis>&#32;c)&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1a811f34f64ec058289a8c010dd747f50f">LogFunction</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;enable&#32;view&#32;called!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SERVER_NODE&#32;=&#32;s;
<anchor xml:id="__topology_painter_8java_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CLIENT_NODE&#32;=&#32;c;
<anchor xml:id="__topology_painter_8java_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;System.out.println(<emphasis role="stringliteral">&quot;Server&#32;:&#32;&quot;</emphasis>+s+<emphasis role="stringliteral">&quot;&#32;client&#32;:&#32;&quot;</emphasis>+c);
<anchor xml:id="__topology_painter_8java_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.repaint();
<anchor xml:id="__topology_painter_8java_source_1l00319"/>00319 &#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00320"/>00320 
<anchor xml:id="__topology_painter_8java_source_1l00331"/>00331 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>&#32;<emphasis role="keywordtype">boolean</emphasis>&#32;checkCollisionWithNode(<link linkend="_class_gui_renderers_1_1_node_painter">NodePainter</link>&#32;n,&#32;<emphasis role="keywordtype">int</emphasis>&#32;x,&#32;<emphasis role="keywordtype">int</emphasis>&#32;y)&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00332"/>00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1a811f34f64ec058289a8c010dd747f50f">LogFunction</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;check&#32;collision&#32;with&#32;node&#32;called!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00333"/>00333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;distance&#32;=&#32;(int)&#32;Math.sqrt(Math.pow(n.xPos&#32;-&#32;x,2)&#32;+&#32;Math.pow(n.yPos&#32;-&#32;y,&#32;2));
<anchor xml:id="__topology_painter_8java_source_1l00334"/>00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;System.out.println(&quot;Distance&#32;:&#32;&quot;+distance);&#32;//&#32;just&#32;for&#32;testing...</emphasis>
<anchor xml:id="__topology_painter_8java_source_1l00335"/>00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(distance&#32;&lt;&#32;n.radius)&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00336"/>00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="__topology_painter_8java_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00338"/>00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="__topology_painter_8java_source_1l00339"/>00339 &#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00340"/>00340 
<anchor xml:id="__topology_painter_8java_source_1l00341"/><link linkend="_class_gui_renderers_1_1_topology_painter_1ae2a6835aea8c708ca9c40dfb80e0bb98">00341</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;ArrayList&lt;NodePainter&gt;&#32;<link linkend="_class_gui_renderers_1_1_topology_painter_1ae2a6835aea8c708ca9c40dfb80e0bb98">getNodes</link>()&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00342"/>00342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1a811f34f64ec058289a8c010dd747f50f">LogFunction</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;get&#32;nodes&#32;called!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00343"/>00343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;nodes;
<anchor xml:id="__topology_painter_8java_source_1l00344"/>00344 &#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00345"/>00345 
<anchor xml:id="__topology_painter_8java_source_1l00346"/><link linkend="_class_gui_renderers_1_1_topology_painter_1a1ef44cd8bc8c30cd12b4b92da784ac6e">00346</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_gui_renderers_1_1_topology_painter_1a1ef44cd8bc8c30cd12b4b92da784ac6e">setNodes</link>(ArrayList&lt;NodePainter&gt;&#32;nodes)&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00347"/>00347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1a811f34f64ec058289a8c010dd747f50f">LogFunction</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;set&#32;nodes&#32;called!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00348"/>00348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.nodes&#32;=&#32;nodes;
<anchor xml:id="__topology_painter_8java_source_1l00349"/>00349 &#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00350"/>00350 
<anchor xml:id="__topology_painter_8java_source_1l00351"/><link linkend="_class_gui_renderers_1_1_topology_painter_1a732e1bec76b94d530f1a7f0d914649c0">00351</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;ArrayList&lt;P2pLinkPainter&gt;&#32;<link linkend="_class_gui_renderers_1_1_topology_painter_1a732e1bec76b94d530f1a7f0d914649c0">getLinks</link>()&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00352"/>00352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1a811f34f64ec058289a8c010dd747f50f">LogFunction</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;get&#32;Links&#32;called!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00353"/>00353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;links;
<anchor xml:id="__topology_painter_8java_source_1l00354"/>00354 &#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00355"/>00355 
<anchor xml:id="__topology_painter_8java_source_1l00356"/><link linkend="_class_gui_renderers_1_1_topology_painter_1abbd9a7ed7da5b965985606b42207a378">00356</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_gui_renderers_1_1_topology_painter_1abbd9a7ed7da5b965985606b42207a378">setLinks</link>(ArrayList&lt;P2pLinkPainter&gt;&#32;links)&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00357"/>00357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1a811f34f64ec058289a8c010dd747f50f">LogFunction</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;set&#32;Links&#32;called!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00358"/>00358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.links&#32;=&#32;links;
<anchor xml:id="__topology_painter_8java_source_1l00359"/>00359 &#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00360"/>00360 
<anchor xml:id="__topology_painter_8java_source_1l00361"/><link linkend="_class_gui_renderers_1_1_topology_painter_1a561180e8a5c771961eca0c7cb9db77eb">00361</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;ArrayList&lt;NodePainter&gt;&#32;<link linkend="_class_gui_renderers_1_1_topology_painter_1a561180e8a5c771961eca0c7cb9db77eb">getReferenceNodes</link>()&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00362"/>00362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1a811f34f64ec058289a8c010dd747f50f">LogFunction</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;get&#32;reference&#32;nodes&#32;called!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00363"/>00363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;referenceNodes;
<anchor xml:id="__topology_painter_8java_source_1l00364"/>00364 &#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00365"/>00365 
<anchor xml:id="__topology_painter_8java_source_1l00366"/><link linkend="_class_gui_renderers_1_1_topology_painter_1ad88ec8bd994ecab0746bb3720812772e">00366</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_gui_renderers_1_1_topology_painter_1ad88ec8bd994ecab0746bb3720812772e">setReferenceNodes</link>(ArrayList&lt;NodePainter&gt;&#32;referenceNodes)&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00367"/>00367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1a811f34f64ec058289a8c010dd747f50f">LogFunction</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;set&#32;reference&#32;nodes&#32;called!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00368"/>00368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.referenceNodes&#32;=&#32;referenceNodes;
<anchor xml:id="__topology_painter_8java_source_1l00369"/>00369 &#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00370"/>00370 
<anchor xml:id="__topology_painter_8java_source_1l00371"/><link linkend="_class_gui_renderers_1_1_topology_painter_1ab8d7cdd648135f4309c7073e8da724ae">00371</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;ArrayList&lt;CsmaLinkPainter&gt;&#32;<link linkend="_class_gui_renderers_1_1_topology_painter_1ab8d7cdd648135f4309c7073e8da724ae">getLinks_csma</link>()&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00372"/>00372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1a811f34f64ec058289a8c010dd747f50f">LogFunction</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;get&#32;csma&#32;links&#32;called!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00373"/>00373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;links_csma;
<anchor xml:id="__topology_painter_8java_source_1l00374"/>00374 &#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00375"/>00375 
<anchor xml:id="__topology_painter_8java_source_1l00376"/><link linkend="_class_gui_renderers_1_1_topology_painter_1aab5a23b67699bcd180d509c0f199304c">00376</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_gui_renderers_1_1_topology_painter_1aab5a23b67699bcd180d509c0f199304c">setLinks_csma</link>(ArrayList&lt;CsmaLinkPainter&gt;&#32;links_csma)&#32;{
<anchor xml:id="__topology_painter_8java_source_1l00377"/>00377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_helpers_1_1_logging_helper">LoggingHelper</link>.<link linkend="_class_helpers_1_1_logging_helper_1a811f34f64ec058289a8c010dd747f50f">LogFunction</link>(<emphasis role="stringliteral">&quot;Topology&#32;Painter&#32;:&#32;set&#32;csma&#32;links&#32;called!&quot;</emphasis>);
<anchor xml:id="__topology_painter_8java_source_1l00378"/>00378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.links_csma&#32;=&#32;links_csma;
<anchor xml:id="__topology_painter_8java_source_1l00379"/>00379 &#32;&#32;&#32;&#32;}
<anchor xml:id="__topology_painter_8java_source_1l00380"/>00380 }
</programlisting></section>
